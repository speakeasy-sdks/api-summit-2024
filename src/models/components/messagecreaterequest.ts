/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ActionRow,
    ActionRow$inboundSchema,
    ActionRow$Outbound,
    ActionRow$outboundSchema,
} from "./actionrow.js";
import {
    MessageAllowedMentionsRequest,
    MessageAllowedMentionsRequest$inboundSchema,
    MessageAllowedMentionsRequest$Outbound,
    MessageAllowedMentionsRequest$outboundSchema,
} from "./messageallowedmentionsrequest.js";
import {
    MessageAttachmentRequest,
    MessageAttachmentRequest$inboundSchema,
    MessageAttachmentRequest$Outbound,
    MessageAttachmentRequest$outboundSchema,
} from "./messageattachmentrequest.js";
import {
    MessageReferenceRequest,
    MessageReferenceRequest$inboundSchema,
    MessageReferenceRequest$Outbound,
    MessageReferenceRequest$outboundSchema,
} from "./messagereferencerequest.js";
import {
    RichEmbed,
    RichEmbed$inboundSchema,
    RichEmbed$Outbound,
    RichEmbed$outboundSchema,
} from "./richembed.js";
import * as z from "zod";

export type MessageCreateRequestNonce = number | string;

export type MessageCreateRequest = {
    content?: string | null | undefined;
    embeds?: Array<RichEmbed> | null | undefined;
    allowedMentions?: MessageAllowedMentionsRequest | null | undefined;
    stickerIds?: Array<string> | null | undefined;
    components?: Array<ActionRow> | null | undefined;
    flags?: number | null | undefined;
    attachments?: Array<MessageAttachmentRequest> | null | undefined;
    messageReference?: MessageReferenceRequest | null | undefined;
    nonce?: number | string | null | undefined;
    enforceNonce?: boolean | null | undefined;
    tts?: boolean | null | undefined;
};

/** @internal */
export const MessageCreateRequestNonce$inboundSchema: z.ZodType<
    MessageCreateRequestNonce,
    z.ZodTypeDef,
    unknown
> = z.union([z.number().int(), z.string()]);

/** @internal */
export type MessageCreateRequestNonce$Outbound = number | string;

/** @internal */
export const MessageCreateRequestNonce$outboundSchema: z.ZodType<
    MessageCreateRequestNonce$Outbound,
    z.ZodTypeDef,
    MessageCreateRequestNonce
> = z.union([z.number().int(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageCreateRequestNonce$ {
    /** @deprecated use `MessageCreateRequestNonce$inboundSchema` instead. */
    export const inboundSchema = MessageCreateRequestNonce$inboundSchema;
    /** @deprecated use `MessageCreateRequestNonce$outboundSchema` instead. */
    export const outboundSchema = MessageCreateRequestNonce$outboundSchema;
    /** @deprecated use `MessageCreateRequestNonce$Outbound` instead. */
    export type Outbound = MessageCreateRequestNonce$Outbound;
}

/** @internal */
export const MessageCreateRequest$inboundSchema: z.ZodType<
    MessageCreateRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        content: z.nullable(z.string()).optional(),
        embeds: z.nullable(z.array(RichEmbed$inboundSchema)).optional(),
        allowed_mentions: z.nullable(MessageAllowedMentionsRequest$inboundSchema).optional(),
        sticker_ids: z.nullable(z.array(z.string())).optional(),
        components: z.nullable(z.array(ActionRow$inboundSchema)).optional(),
        flags: z.nullable(z.number().int()).optional(),
        attachments: z.nullable(z.array(MessageAttachmentRequest$inboundSchema)).optional(),
        message_reference: z.nullable(MessageReferenceRequest$inboundSchema).optional(),
        nonce: z.nullable(z.union([z.number().int(), z.string()])).optional(),
        enforce_nonce: z.nullable(z.boolean()).optional(),
        tts: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            allowed_mentions: "allowedMentions",
            sticker_ids: "stickerIds",
            message_reference: "messageReference",
            enforce_nonce: "enforceNonce",
        });
    });

/** @internal */
export type MessageCreateRequest$Outbound = {
    content?: string | null | undefined;
    embeds?: Array<RichEmbed$Outbound> | null | undefined;
    allowed_mentions?: MessageAllowedMentionsRequest$Outbound | null | undefined;
    sticker_ids?: Array<string> | null | undefined;
    components?: Array<ActionRow$Outbound> | null | undefined;
    flags?: number | null | undefined;
    attachments?: Array<MessageAttachmentRequest$Outbound> | null | undefined;
    message_reference?: MessageReferenceRequest$Outbound | null | undefined;
    nonce?: number | string | null | undefined;
    enforce_nonce?: boolean | null | undefined;
    tts?: boolean | null | undefined;
};

/** @internal */
export const MessageCreateRequest$outboundSchema: z.ZodType<
    MessageCreateRequest$Outbound,
    z.ZodTypeDef,
    MessageCreateRequest
> = z
    .object({
        content: z.nullable(z.string()).optional(),
        embeds: z.nullable(z.array(RichEmbed$outboundSchema)).optional(),
        allowedMentions: z.nullable(MessageAllowedMentionsRequest$outboundSchema).optional(),
        stickerIds: z.nullable(z.array(z.string())).optional(),
        components: z.nullable(z.array(ActionRow$outboundSchema)).optional(),
        flags: z.nullable(z.number().int()).optional(),
        attachments: z.nullable(z.array(MessageAttachmentRequest$outboundSchema)).optional(),
        messageReference: z.nullable(MessageReferenceRequest$outboundSchema).optional(),
        nonce: z.nullable(z.union([z.number().int(), z.string()])).optional(),
        enforceNonce: z.nullable(z.boolean()).optional(),
        tts: z.nullable(z.boolean()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            allowedMentions: "allowed_mentions",
            stickerIds: "sticker_ids",
            messageReference: "message_reference",
            enforceNonce: "enforce_nonce",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageCreateRequest$ {
    /** @deprecated use `MessageCreateRequest$inboundSchema` instead. */
    export const inboundSchema = MessageCreateRequest$inboundSchema;
    /** @deprecated use `MessageCreateRequest$outboundSchema` instead. */
    export const outboundSchema = MessageCreateRequest$outboundSchema;
    /** @deprecated use `MessageCreateRequest$Outbound` instead. */
    export type Outbound = MessageCreateRequest$Outbound;
}
