/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ChannelSelectDefaultValue,
  ChannelSelectDefaultValue$inboundSchema,
  ChannelSelectDefaultValue$Outbound,
  ChannelSelectDefaultValue$outboundSchema,
} from "./channelselectdefaultvalue.js";

export type ChannelSelect = {
  type?: 1 | undefined;
  customId: string;
  placeholder?: string | null | undefined;
  minValues?: number | null | undefined;
  maxValues?: number | null | undefined;
  disabled?: boolean | null | undefined;
  defaultValues?: Array<ChannelSelectDefaultValue> | null | undefined;
  channelTypes?: Array<number> | null | undefined;
};

/** @internal */
export const ChannelSelect$inboundSchema: z.ZodType<
  ChannelSelect,
  z.ZodTypeDef,
  unknown
> = z.object({
  type: z.literal(1).optional(),
  custom_id: z.string(),
  placeholder: z.nullable(z.string()).optional(),
  min_values: z.nullable(z.number().int()).optional(),
  max_values: z.nullable(z.number().int()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  default_values: z.nullable(z.array(ChannelSelectDefaultValue$inboundSchema))
    .optional(),
  channel_types: z.nullable(z.array(z.number().int())).optional(),
}).transform((v) => {
  return remap$(v, {
    "custom_id": "customId",
    "min_values": "minValues",
    "max_values": "maxValues",
    "default_values": "defaultValues",
    "channel_types": "channelTypes",
  });
});

/** @internal */
export type ChannelSelect$Outbound = {
  type: 1;
  custom_id: string;
  placeholder?: string | null | undefined;
  min_values?: number | null | undefined;
  max_values?: number | null | undefined;
  disabled?: boolean | null | undefined;
  default_values?: Array<ChannelSelectDefaultValue$Outbound> | null | undefined;
  channel_types?: Array<number> | null | undefined;
};

/** @internal */
export const ChannelSelect$outboundSchema: z.ZodType<
  ChannelSelect$Outbound,
  z.ZodTypeDef,
  ChannelSelect
> = z.object({
  type: z.literal(1).default(1 as const),
  customId: z.string(),
  placeholder: z.nullable(z.string()).optional(),
  minValues: z.nullable(z.number().int()).optional(),
  maxValues: z.nullable(z.number().int()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  defaultValues: z.nullable(z.array(ChannelSelectDefaultValue$outboundSchema))
    .optional(),
  channelTypes: z.nullable(z.array(z.number().int())).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    minValues: "min_values",
    maxValues: "max_values",
    defaultValues: "default_values",
    channelTypes: "channel_types",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChannelSelect$ {
  /** @deprecated use `ChannelSelect$inboundSchema` instead. */
  export const inboundSchema = ChannelSelect$inboundSchema;
  /** @deprecated use `ChannelSelect$outboundSchema` instead. */
  export const outboundSchema = ChannelSelect$outboundSchema;
  /** @deprecated use `ChannelSelect$Outbound` instead. */
  export type Outbound = ChannelSelect$Outbound;
}
