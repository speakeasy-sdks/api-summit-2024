/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type MessageEmbedFooterResponse = {
    text: string;
    iconUrl?: string | null | undefined;
    proxyIconUrl?: string | null | undefined;
};

/** @internal */
export const MessageEmbedFooterResponse$inboundSchema: z.ZodType<
    MessageEmbedFooterResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        text: z.string(),
        icon_url: z.nullable(z.string()).optional(),
        proxy_icon_url: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            icon_url: "iconUrl",
            proxy_icon_url: "proxyIconUrl",
        });
    });

/** @internal */
export type MessageEmbedFooterResponse$Outbound = {
    text: string;
    icon_url?: string | null | undefined;
    proxy_icon_url?: string | null | undefined;
};

/** @internal */
export const MessageEmbedFooterResponse$outboundSchema: z.ZodType<
    MessageEmbedFooterResponse$Outbound,
    z.ZodTypeDef,
    MessageEmbedFooterResponse
> = z
    .object({
        text: z.string(),
        iconUrl: z.nullable(z.string()).optional(),
        proxyIconUrl: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            iconUrl: "icon_url",
            proxyIconUrl: "proxy_icon_url",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageEmbedFooterResponse$ {
    /** @deprecated use `MessageEmbedFooterResponse$inboundSchema` instead. */
    export const inboundSchema = MessageEmbedFooterResponse$inboundSchema;
    /** @deprecated use `MessageEmbedFooterResponse$outboundSchema` instead. */
    export const outboundSchema = MessageEmbedFooterResponse$outboundSchema;
    /** @deprecated use `MessageEmbedFooterResponse$Outbound` instead. */
    export type Outbound = MessageEmbedFooterResponse$Outbound;
}
