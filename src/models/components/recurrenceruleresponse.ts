/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ByNWeekdayResponse,
    ByNWeekdayResponse$inboundSchema,
    ByNWeekdayResponse$Outbound,
    ByNWeekdayResponse$outboundSchema,
} from "./bynweekdayresponse.js";
import * as z from "zod";

export type RecurrenceRuleResponse = {
    start: Date;
    end?: Date | null | undefined;
    frequency?: 3 | undefined;
    interval?: number | null | undefined;
    byWeekday?: Array<number> | null | undefined;
    byNWeekday?: Array<ByNWeekdayResponse> | null | undefined;
    byMonth?: Array<number> | null | undefined;
    byMonthDay?: Array<number> | null | undefined;
    byYearDay?: Array<number> | null | undefined;
    count?: number | null | undefined;
};

/** @internal */
export const RecurrenceRuleResponse$inboundSchema: z.ZodType<
    RecurrenceRuleResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        start: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        end: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        frequency: z.literal(3).optional(),
        interval: z.nullable(z.number().int()).optional(),
        by_weekday: z.nullable(z.array(z.number().int())).optional(),
        by_n_weekday: z.nullable(z.array(ByNWeekdayResponse$inboundSchema)).optional(),
        by_month: z.nullable(z.array(z.number().int())).optional(),
        by_month_day: z.nullable(z.array(z.number().int())).optional(),
        by_year_day: z.nullable(z.array(z.number().int())).optional(),
        count: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            by_weekday: "byWeekday",
            by_n_weekday: "byNWeekday",
            by_month: "byMonth",
            by_month_day: "byMonthDay",
            by_year_day: "byYearDay",
        });
    });

/** @internal */
export type RecurrenceRuleResponse$Outbound = {
    start: string;
    end?: string | null | undefined;
    frequency: 3;
    interval?: number | null | undefined;
    by_weekday?: Array<number> | null | undefined;
    by_n_weekday?: Array<ByNWeekdayResponse$Outbound> | null | undefined;
    by_month?: Array<number> | null | undefined;
    by_month_day?: Array<number> | null | undefined;
    by_year_day?: Array<number> | null | undefined;
    count?: number | null | undefined;
};

/** @internal */
export const RecurrenceRuleResponse$outboundSchema: z.ZodType<
    RecurrenceRuleResponse$Outbound,
    z.ZodTypeDef,
    RecurrenceRuleResponse
> = z
    .object({
        start: z.date().transform((v) => v.toISOString()),
        end: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        frequency: z.literal(3).default(3 as const),
        interval: z.nullable(z.number().int()).optional(),
        byWeekday: z.nullable(z.array(z.number().int())).optional(),
        byNWeekday: z.nullable(z.array(ByNWeekdayResponse$outboundSchema)).optional(),
        byMonth: z.nullable(z.array(z.number().int())).optional(),
        byMonthDay: z.nullable(z.array(z.number().int())).optional(),
        byYearDay: z.nullable(z.array(z.number().int())).optional(),
        count: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            byWeekday: "by_weekday",
            byNWeekday: "by_n_weekday",
            byMonth: "by_month",
            byMonthDay: "by_month_day",
            byYearDay: "by_year_day",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace RecurrenceRuleResponse$ {
    /** @deprecated use `RecurrenceRuleResponse$inboundSchema` instead. */
    export const inboundSchema = RecurrenceRuleResponse$inboundSchema;
    /** @deprecated use `RecurrenceRuleResponse$outboundSchema` instead. */
    export const outboundSchema = RecurrenceRuleResponse$outboundSchema;
    /** @deprecated use `RecurrenceRuleResponse$Outbound` instead. */
    export type Outbound = RecurrenceRuleResponse$Outbound;
}
