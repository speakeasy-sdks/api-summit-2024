/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    UserResponse,
    UserResponse$inboundSchema,
    UserResponse$Outbound,
    UserResponse$outboundSchema,
} from "./userresponse.js";
import * as z from "zod";

export type PrivateGroupChannelResponse = {
    id: string;
    type?: 1 | undefined;
    lastMessageId?: string | null | undefined;
    flags: number;
    lastPinTimestamp?: Date | null | undefined;
    recipients: Array<UserResponse>;
    name?: string | null | undefined;
    icon?: string | null | undefined;
    ownerId?: string | null | undefined;
    managed?: boolean | null | undefined;
    applicationId?: string | null | undefined;
};

/** @internal */
export const PrivateGroupChannelResponse$inboundSchema: z.ZodType<
    PrivateGroupChannelResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        type: z.literal(1).optional(),
        last_message_id: z.nullable(z.string()).optional(),
        flags: z.number().int(),
        last_pin_timestamp: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        recipients: z.array(UserResponse$inboundSchema),
        name: z.nullable(z.string()).optional(),
        icon: z.nullable(z.string()).optional(),
        owner_id: z.nullable(z.string()).optional(),
        managed: z.nullable(z.boolean()).optional(),
        application_id: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            last_message_id: "lastMessageId",
            last_pin_timestamp: "lastPinTimestamp",
            owner_id: "ownerId",
            application_id: "applicationId",
        });
    });

/** @internal */
export type PrivateGroupChannelResponse$Outbound = {
    id: string;
    type: 1;
    last_message_id?: string | null | undefined;
    flags: number;
    last_pin_timestamp?: string | null | undefined;
    recipients: Array<UserResponse$Outbound>;
    name?: string | null | undefined;
    icon?: string | null | undefined;
    owner_id?: string | null | undefined;
    managed?: boolean | null | undefined;
    application_id?: string | null | undefined;
};

/** @internal */
export const PrivateGroupChannelResponse$outboundSchema: z.ZodType<
    PrivateGroupChannelResponse$Outbound,
    z.ZodTypeDef,
    PrivateGroupChannelResponse
> = z
    .object({
        id: z.string(),
        type: z.literal(1).default(1 as const),
        lastMessageId: z.nullable(z.string()).optional(),
        flags: z.number().int(),
        lastPinTimestamp: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        recipients: z.array(UserResponse$outboundSchema),
        name: z.nullable(z.string()).optional(),
        icon: z.nullable(z.string()).optional(),
        ownerId: z.nullable(z.string()).optional(),
        managed: z.nullable(z.boolean()).optional(),
        applicationId: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            lastMessageId: "last_message_id",
            lastPinTimestamp: "last_pin_timestamp",
            ownerId: "owner_id",
            applicationId: "application_id",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PrivateGroupChannelResponse$ {
    /** @deprecated use `PrivateGroupChannelResponse$inboundSchema` instead. */
    export const inboundSchema = PrivateGroupChannelResponse$inboundSchema;
    /** @deprecated use `PrivateGroupChannelResponse$outboundSchema` instead. */
    export const outboundSchema = PrivateGroupChannelResponse$outboundSchema;
    /** @deprecated use `PrivateGroupChannelResponse$Outbound` instead. */
    export type Outbound = PrivateGroupChannelResponse$Outbound;
}
