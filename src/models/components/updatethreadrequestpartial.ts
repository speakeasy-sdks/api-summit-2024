/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type UpdateThreadRequestPartial = {
  name?: string | null | undefined;
  archived?: boolean | null | undefined;
  locked?: boolean | null | undefined;
  invitable?: boolean | null | undefined;
  autoArchiveDuration?: 60 | null | undefined;
  rateLimitPerUser?: number | null | undefined;
  flags?: number | null | undefined;
  appliedTags?: Array<string> | null | undefined;
  bitrate?: number | null | undefined;
  userLimit?: number | null | undefined;
  rtcRegion?: string | null | undefined;
  videoQualityMode?: 1 | null | undefined;
};

/** @internal */
export const UpdateThreadRequestPartial$inboundSchema: z.ZodType<
  UpdateThreadRequestPartial,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.nullable(z.string()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  locked: z.nullable(z.boolean()).optional(),
  invitable: z.nullable(z.boolean()).optional(),
  auto_archive_duration: z.nullable(z.literal(60)).optional(),
  rate_limit_per_user: z.nullable(z.number().int()).optional(),
  flags: z.nullable(z.number().int()).optional(),
  applied_tags: z.nullable(z.array(z.string())).optional(),
  bitrate: z.nullable(z.number().int()).optional(),
  user_limit: z.nullable(z.number().int()).optional(),
  rtc_region: z.nullable(z.string()).optional(),
  video_quality_mode: z.nullable(z.literal(1)).optional(),
}).transform((v) => {
  return remap$(v, {
    "auto_archive_duration": "autoArchiveDuration",
    "rate_limit_per_user": "rateLimitPerUser",
    "applied_tags": "appliedTags",
    "user_limit": "userLimit",
    "rtc_region": "rtcRegion",
    "video_quality_mode": "videoQualityMode",
  });
});

/** @internal */
export type UpdateThreadRequestPartial$Outbound = {
  name?: string | null | undefined;
  archived?: boolean | null | undefined;
  locked?: boolean | null | undefined;
  invitable?: boolean | null | undefined;
  auto_archive_duration: 60 | null;
  rate_limit_per_user?: number | null | undefined;
  flags?: number | null | undefined;
  applied_tags?: Array<string> | null | undefined;
  bitrate?: number | null | undefined;
  user_limit?: number | null | undefined;
  rtc_region?: string | null | undefined;
  video_quality_mode: 1 | null;
};

/** @internal */
export const UpdateThreadRequestPartial$outboundSchema: z.ZodType<
  UpdateThreadRequestPartial$Outbound,
  z.ZodTypeDef,
  UpdateThreadRequestPartial
> = z.object({
  name: z.nullable(z.string()).optional(),
  archived: z.nullable(z.boolean()).optional(),
  locked: z.nullable(z.boolean()).optional(),
  invitable: z.nullable(z.boolean()).optional(),
  autoArchiveDuration: z.nullable(z.literal(60).default(60 as const)),
  rateLimitPerUser: z.nullable(z.number().int()).optional(),
  flags: z.nullable(z.number().int()).optional(),
  appliedTags: z.nullable(z.array(z.string())).optional(),
  bitrate: z.nullable(z.number().int()).optional(),
  userLimit: z.nullable(z.number().int()).optional(),
  rtcRegion: z.nullable(z.string()).optional(),
  videoQualityMode: z.nullable(z.literal(1).default(1 as const)),
}).transform((v) => {
  return remap$(v, {
    autoArchiveDuration: "auto_archive_duration",
    rateLimitPerUser: "rate_limit_per_user",
    appliedTags: "applied_tags",
    userLimit: "user_limit",
    rtcRegion: "rtc_region",
    videoQualityMode: "video_quality_mode",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateThreadRequestPartial$ {
  /** @deprecated use `UpdateThreadRequestPartial$inboundSchema` instead. */
  export const inboundSchema = UpdateThreadRequestPartial$inboundSchema;
  /** @deprecated use `UpdateThreadRequestPartial$outboundSchema` instead. */
  export const outboundSchema = UpdateThreadRequestPartial$outboundSchema;
  /** @deprecated use `UpdateThreadRequestPartial$Outbound` instead. */
  export type Outbound = UpdateThreadRequestPartial$Outbound;
}
