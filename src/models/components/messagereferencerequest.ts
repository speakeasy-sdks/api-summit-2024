/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type MessageReferenceRequest = {
  guildId?: string | null | undefined;
  channelId?: string | null | undefined;
  messageId: string;
  failIfNotExists?: boolean | null | undefined;
  type?: 0 | null | undefined;
};

/** @internal */
export const MessageReferenceRequest$inboundSchema: z.ZodType<
  MessageReferenceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  guild_id: z.nullable(z.string()).optional(),
  channel_id: z.nullable(z.string()).optional(),
  message_id: z.string(),
  fail_if_not_exists: z.nullable(z.boolean()).optional(),
  type: z.nullable(z.literal(0)).optional(),
}).transform((v) => {
  return remap$(v, {
    "guild_id": "guildId",
    "channel_id": "channelId",
    "message_id": "messageId",
    "fail_if_not_exists": "failIfNotExists",
  });
});

/** @internal */
export type MessageReferenceRequest$Outbound = {
  guild_id?: string | null | undefined;
  channel_id?: string | null | undefined;
  message_id: string;
  fail_if_not_exists?: boolean | null | undefined;
  type: 0 | null;
};

/** @internal */
export const MessageReferenceRequest$outboundSchema: z.ZodType<
  MessageReferenceRequest$Outbound,
  z.ZodTypeDef,
  MessageReferenceRequest
> = z.object({
  guildId: z.nullable(z.string()).optional(),
  channelId: z.nullable(z.string()).optional(),
  messageId: z.string(),
  failIfNotExists: z.nullable(z.boolean()).optional(),
  type: z.nullable(z.literal(0).default(0 as const)),
}).transform((v) => {
  return remap$(v, {
    guildId: "guild_id",
    channelId: "channel_id",
    messageId: "message_id",
    failIfNotExists: "fail_if_not_exists",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageReferenceRequest$ {
  /** @deprecated use `MessageReferenceRequest$inboundSchema` instead. */
  export const inboundSchema = MessageReferenceRequest$inboundSchema;
  /** @deprecated use `MessageReferenceRequest$outboundSchema` instead. */
  export const outboundSchema = MessageReferenceRequest$outboundSchema;
  /** @deprecated use `MessageReferenceRequest$Outbound` instead. */
  export type Outbound = MessageReferenceRequest$Outbound;
}
