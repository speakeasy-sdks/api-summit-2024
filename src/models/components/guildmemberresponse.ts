/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    UserAvatarDecorationResponse,
    UserAvatarDecorationResponse$inboundSchema,
    UserAvatarDecorationResponse$Outbound,
    UserAvatarDecorationResponse$outboundSchema,
} from "./useravatardecorationresponse.js";
import {
    UserResponse,
    UserResponse$inboundSchema,
    UserResponse$Outbound,
    UserResponse$outboundSchema,
} from "./userresponse.js";
import * as z from "zod";

export type GuildMemberResponse = {
    avatar?: string | null | undefined;
    avatarDecorationData?: UserAvatarDecorationResponse | null | undefined;
    banner?: string | null | undefined;
    communicationDisabledUntil?: Date | null | undefined;
    flags: number;
    joinedAt: Date;
    nick?: string | null | undefined;
    pending: boolean;
    premiumSince?: Date | null | undefined;
    roles: Array<string>;
    user: UserResponse;
    mute: boolean;
    deaf: boolean;
};

/** @internal */
export const GuildMemberResponse$inboundSchema: z.ZodType<
    GuildMemberResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        avatar: z.nullable(z.string()).optional(),
        avatar_decoration_data: z.nullable(UserAvatarDecorationResponse$inboundSchema).optional(),
        banner: z.nullable(z.string()).optional(),
        communication_disabled_until: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        flags: z.number().int(),
        joined_at: z
            .string()
            .datetime({ offset: true })
            .transform((v) => new Date(v)),
        nick: z.nullable(z.string()).optional(),
        pending: z.boolean(),
        premium_since: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        roles: z.array(z.string()),
        user: UserResponse$inboundSchema,
        mute: z.boolean(),
        deaf: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            avatar_decoration_data: "avatarDecorationData",
            communication_disabled_until: "communicationDisabledUntil",
            joined_at: "joinedAt",
            premium_since: "premiumSince",
        });
    });

/** @internal */
export type GuildMemberResponse$Outbound = {
    avatar?: string | null | undefined;
    avatar_decoration_data?: UserAvatarDecorationResponse$Outbound | null | undefined;
    banner?: string | null | undefined;
    communication_disabled_until?: string | null | undefined;
    flags: number;
    joined_at: string;
    nick?: string | null | undefined;
    pending: boolean;
    premium_since?: string | null | undefined;
    roles: Array<string>;
    user: UserResponse$Outbound;
    mute: boolean;
    deaf: boolean;
};

/** @internal */
export const GuildMemberResponse$outboundSchema: z.ZodType<
    GuildMemberResponse$Outbound,
    z.ZodTypeDef,
    GuildMemberResponse
> = z
    .object({
        avatar: z.nullable(z.string()).optional(),
        avatarDecorationData: z.nullable(UserAvatarDecorationResponse$outboundSchema).optional(),
        banner: z.nullable(z.string()).optional(),
        communicationDisabledUntil: z
            .nullable(z.date().transform((v) => v.toISOString()))
            .optional(),
        flags: z.number().int(),
        joinedAt: z.date().transform((v) => v.toISOString()),
        nick: z.nullable(z.string()).optional(),
        pending: z.boolean(),
        premiumSince: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        roles: z.array(z.string()),
        user: UserResponse$outboundSchema,
        mute: z.boolean(),
        deaf: z.boolean(),
    })
    .transform((v) => {
        return remap$(v, {
            avatarDecorationData: "avatar_decoration_data",
            communicationDisabledUntil: "communication_disabled_until",
            joinedAt: "joined_at",
            premiumSince: "premium_since",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildMemberResponse$ {
    /** @deprecated use `GuildMemberResponse$inboundSchema` instead. */
    export const inboundSchema = GuildMemberResponse$inboundSchema;
    /** @deprecated use `GuildMemberResponse$outboundSchema` instead. */
    export const outboundSchema = GuildMemberResponse$outboundSchema;
    /** @deprecated use `GuildMemberResponse$Outbound` instead. */
    export type Outbound = GuildMemberResponse$Outbound;
}
