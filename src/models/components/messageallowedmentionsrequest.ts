/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type MessageAllowedMentionsRequest = {
  parse?: Array<string> | null | undefined;
  users?: Array<string> | null | undefined;
  roles?: Array<string> | null | undefined;
  repliedUser?: boolean | null | undefined;
};

/** @internal */
export const MessageAllowedMentionsRequest$inboundSchema: z.ZodType<
  MessageAllowedMentionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  parse: z.nullable(z.array(z.string())).optional(),
  users: z.nullable(z.array(z.string())).optional(),
  roles: z.nullable(z.array(z.string())).optional(),
  replied_user: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    "replied_user": "repliedUser",
  });
});

/** @internal */
export type MessageAllowedMentionsRequest$Outbound = {
  parse?: Array<string> | null | undefined;
  users?: Array<string> | null | undefined;
  roles?: Array<string> | null | undefined;
  replied_user?: boolean | null | undefined;
};

/** @internal */
export const MessageAllowedMentionsRequest$outboundSchema: z.ZodType<
  MessageAllowedMentionsRequest$Outbound,
  z.ZodTypeDef,
  MessageAllowedMentionsRequest
> = z.object({
  parse: z.nullable(z.array(z.string())).optional(),
  users: z.nullable(z.array(z.string())).optional(),
  roles: z.nullable(z.array(z.string())).optional(),
  repliedUser: z.nullable(z.boolean()).optional(),
}).transform((v) => {
  return remap$(v, {
    repliedUser: "replied_user",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageAllowedMentionsRequest$ {
  /** @deprecated use `MessageAllowedMentionsRequest$inboundSchema` instead. */
  export const inboundSchema = MessageAllowedMentionsRequest$inboundSchema;
  /** @deprecated use `MessageAllowedMentionsRequest$outboundSchema` instead. */
  export const outboundSchema = MessageAllowedMentionsRequest$outboundSchema;
  /** @deprecated use `MessageAllowedMentionsRequest$Outbound` instead. */
  export type Outbound = MessageAllowedMentionsRequest$Outbound;
}
