/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type InputText = {
    type?: 1 | undefined;
    customId: string;
    style?: 1 | undefined;
    label: string;
    value?: string | null | undefined;
    placeholder?: string | null | undefined;
    required?: boolean | null | undefined;
    minLength?: number | null | undefined;
    maxLength?: number | null | undefined;
};

/** @internal */
export const InputText$inboundSchema: z.ZodType<InputText, z.ZodTypeDef, unknown> = z
    .object({
        type: z.literal(1).optional(),
        custom_id: z.string(),
        style: z.literal(1).optional(),
        label: z.string(),
        value: z.nullable(z.string()).optional(),
        placeholder: z.nullable(z.string()).optional(),
        required: z.nullable(z.boolean()).optional(),
        min_length: z.nullable(z.number().int()).optional(),
        max_length: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            custom_id: "customId",
            min_length: "minLength",
            max_length: "maxLength",
        });
    });

/** @internal */
export type InputText$Outbound = {
    type: 1;
    custom_id: string;
    style: 1;
    label: string;
    value?: string | null | undefined;
    placeholder?: string | null | undefined;
    required?: boolean | null | undefined;
    min_length?: number | null | undefined;
    max_length?: number | null | undefined;
};

/** @internal */
export const InputText$outboundSchema: z.ZodType<InputText$Outbound, z.ZodTypeDef, InputText> = z
    .object({
        type: z.literal(1).default(1 as const),
        customId: z.string(),
        style: z.literal(1).default(1 as const),
        label: z.string(),
        value: z.nullable(z.string()).optional(),
        placeholder: z.nullable(z.string()).optional(),
        required: z.nullable(z.boolean()).optional(),
        minLength: z.nullable(z.number().int()).optional(),
        maxLength: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            customId: "custom_id",
            minLength: "min_length",
            maxLength: "max_length",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InputText$ {
    /** @deprecated use `InputText$inboundSchema` instead. */
    export const inboundSchema = InputText$inboundSchema;
    /** @deprecated use `InputText$outboundSchema` instead. */
    export const outboundSchema = InputText$outboundSchema;
    /** @deprecated use `InputText$Outbound` instead. */
    export type Outbound = InputText$Outbound;
}
