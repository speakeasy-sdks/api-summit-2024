/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  Emoji,
  Emoji$inboundSchema,
  Emoji$Outbound,
  Emoji$outboundSchema,
} from "./emoji.js";

export type Button = {
  type?: 1 | undefined;
  customId?: string | null | undefined;
  style?: 1 | undefined;
  label?: string | null | undefined;
  disabled?: boolean | null | undefined;
  emoji?: Emoji | null | undefined;
  url?: string | null | undefined;
  skuId?: string | null | undefined;
};

/** @internal */
export const Button$inboundSchema: z.ZodType<Button, z.ZodTypeDef, unknown> = z
  .object({
    type: z.literal(1).optional(),
    custom_id: z.nullable(z.string()).optional(),
    style: z.literal(1).optional(),
    label: z.nullable(z.string()).optional(),
    disabled: z.nullable(z.boolean()).optional(),
    emoji: z.nullable(Emoji$inboundSchema).optional(),
    url: z.nullable(z.string()).optional(),
    sku_id: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "custom_id": "customId",
      "sku_id": "skuId",
    });
  });

/** @internal */
export type Button$Outbound = {
  type: 1;
  custom_id?: string | null | undefined;
  style: 1;
  label?: string | null | undefined;
  disabled?: boolean | null | undefined;
  emoji?: Emoji$Outbound | null | undefined;
  url?: string | null | undefined;
  sku_id?: string | null | undefined;
};

/** @internal */
export const Button$outboundSchema: z.ZodType<
  Button$Outbound,
  z.ZodTypeDef,
  Button
> = z.object({
  type: z.literal(1).default(1 as const),
  customId: z.nullable(z.string()).optional(),
  style: z.literal(1).default(1 as const),
  label: z.nullable(z.string()).optional(),
  disabled: z.nullable(z.boolean()).optional(),
  emoji: z.nullable(Emoji$outboundSchema).optional(),
  url: z.nullable(z.string()).optional(),
  skuId: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    customId: "custom_id",
    skuId: "sku_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Button$ {
  /** @deprecated use `Button$inboundSchema` instead. */
  export const inboundSchema = Button$inboundSchema;
  /** @deprecated use `Button$outboundSchema` instead. */
  export const outboundSchema = Button$outboundSchema;
  /** @deprecated use `Button$Outbound` instead. */
  export type Outbound = Button$Outbound;
}
