/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import {
  InnerErrors,
  InnerErrors$inboundSchema,
  InnerErrors$Outbound,
  InnerErrors$outboundSchema,
} from "./innererrors.js";

export type ErrorDetails = InnerErrors | { [k: string]: ErrorDetails };

/** @internal */
export const ErrorDetails$inboundSchema: z.ZodType<
  ErrorDetails,
  z.ZodTypeDef,
  unknown
> = z.union([
  InnerErrors$inboundSchema,
  z.record(z.lazy(() => ErrorDetails$inboundSchema)),
]);

/** @internal */
export type ErrorDetails$Outbound = InnerErrors$Outbound | {
  [k: string]: ErrorDetails$Outbound;
};

/** @internal */
export const ErrorDetails$outboundSchema: z.ZodType<
  ErrorDetails$Outbound,
  z.ZodTypeDef,
  ErrorDetails
> = z.union([
  InnerErrors$outboundSchema,
  z.record(z.lazy(() => ErrorDetails$outboundSchema)),
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorDetails$ {
  /** @deprecated use `ErrorDetails$inboundSchema` instead. */
  export const inboundSchema = ErrorDetails$inboundSchema;
  /** @deprecated use `ErrorDetails$outboundSchema` instead. */
  export const outboundSchema = ErrorDetails$outboundSchema;
  /** @deprecated use `ErrorDetails$Outbound` instead. */
  export type Outbound = ErrorDetails$Outbound;
}
