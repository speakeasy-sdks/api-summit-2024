/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import {
  ThreadMemberResponse,
  ThreadMemberResponse$inboundSchema,
  ThreadMemberResponse$Outbound,
  ThreadMemberResponse$outboundSchema,
} from "./threadmemberresponse.js";
import {
  ThreadMetadataResponse,
  ThreadMetadataResponse$inboundSchema,
  ThreadMetadataResponse$Outbound,
  ThreadMetadataResponse$outboundSchema,
} from "./threadmetadataresponse.js";

export type ThreadResponse = {
  id: string;
  type?: 1 | undefined;
  lastMessageId?: string | null | undefined;
  flags: number;
  lastPinTimestamp?: Date | null | undefined;
  guildId: string;
  name: string;
  parentId?: string | null | undefined;
  rateLimitPerUser?: number | null | undefined;
  bitrate?: number | null | undefined;
  userLimit?: number | null | undefined;
  rtcRegion?: string | null | undefined;
  videoQualityMode?: 1 | null | undefined;
  permissions?: string | null | undefined;
  ownerId: string;
  threadMetadata?: ThreadMetadataResponse | null | undefined;
  messageCount: number;
  memberCount: number;
  totalMessageSent: number;
  appliedTags?: Array<string> | null | undefined;
  member?: ThreadMemberResponse | null | undefined;
};

/** @internal */
export const ThreadResponse$inboundSchema: z.ZodType<
  ThreadResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  type: z.literal(1).optional(),
  last_message_id: z.nullable(z.string()).optional(),
  flags: z.number().int(),
  last_pin_timestamp: z.nullable(
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
  ).optional(),
  guild_id: z.string(),
  name: z.string(),
  parent_id: z.nullable(z.string()).optional(),
  rate_limit_per_user: z.nullable(z.number().int()).optional(),
  bitrate: z.nullable(z.number().int()).optional(),
  user_limit: z.nullable(z.number().int()).optional(),
  rtc_region: z.nullable(z.string()).optional(),
  video_quality_mode: z.nullable(z.literal(1)).optional(),
  permissions: z.nullable(z.string()).optional(),
  owner_id: z.string(),
  thread_metadata: z.nullable(ThreadMetadataResponse$inboundSchema).optional(),
  message_count: z.number().int(),
  member_count: z.number().int(),
  total_message_sent: z.number().int(),
  applied_tags: z.nullable(z.array(z.string())).optional(),
  member: z.nullable(ThreadMemberResponse$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "last_message_id": "lastMessageId",
    "last_pin_timestamp": "lastPinTimestamp",
    "guild_id": "guildId",
    "parent_id": "parentId",
    "rate_limit_per_user": "rateLimitPerUser",
    "user_limit": "userLimit",
    "rtc_region": "rtcRegion",
    "video_quality_mode": "videoQualityMode",
    "owner_id": "ownerId",
    "thread_metadata": "threadMetadata",
    "message_count": "messageCount",
    "member_count": "memberCount",
    "total_message_sent": "totalMessageSent",
    "applied_tags": "appliedTags",
  });
});

/** @internal */
export type ThreadResponse$Outbound = {
  id: string;
  type: 1;
  last_message_id?: string | null | undefined;
  flags: number;
  last_pin_timestamp?: string | null | undefined;
  guild_id: string;
  name: string;
  parent_id?: string | null | undefined;
  rate_limit_per_user?: number | null | undefined;
  bitrate?: number | null | undefined;
  user_limit?: number | null | undefined;
  rtc_region?: string | null | undefined;
  video_quality_mode: 1 | null;
  permissions?: string | null | undefined;
  owner_id: string;
  thread_metadata?: ThreadMetadataResponse$Outbound | null | undefined;
  message_count: number;
  member_count: number;
  total_message_sent: number;
  applied_tags?: Array<string> | null | undefined;
  member?: ThreadMemberResponse$Outbound | null | undefined;
};

/** @internal */
export const ThreadResponse$outboundSchema: z.ZodType<
  ThreadResponse$Outbound,
  z.ZodTypeDef,
  ThreadResponse
> = z.object({
  id: z.string(),
  type: z.literal(1).default(1 as const),
  lastMessageId: z.nullable(z.string()).optional(),
  flags: z.number().int(),
  lastPinTimestamp: z.nullable(z.date().transform(v => v.toISOString()))
    .optional(),
  guildId: z.string(),
  name: z.string(),
  parentId: z.nullable(z.string()).optional(),
  rateLimitPerUser: z.nullable(z.number().int()).optional(),
  bitrate: z.nullable(z.number().int()).optional(),
  userLimit: z.nullable(z.number().int()).optional(),
  rtcRegion: z.nullable(z.string()).optional(),
  videoQualityMode: z.nullable(z.literal(1).default(1 as const)),
  permissions: z.nullable(z.string()).optional(),
  ownerId: z.string(),
  threadMetadata: z.nullable(ThreadMetadataResponse$outboundSchema).optional(),
  messageCount: z.number().int(),
  memberCount: z.number().int(),
  totalMessageSent: z.number().int(),
  appliedTags: z.nullable(z.array(z.string())).optional(),
  member: z.nullable(ThreadMemberResponse$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    lastMessageId: "last_message_id",
    lastPinTimestamp: "last_pin_timestamp",
    guildId: "guild_id",
    parentId: "parent_id",
    rateLimitPerUser: "rate_limit_per_user",
    userLimit: "user_limit",
    rtcRegion: "rtc_region",
    videoQualityMode: "video_quality_mode",
    ownerId: "owner_id",
    threadMetadata: "thread_metadata",
    messageCount: "message_count",
    memberCount: "member_count",
    totalMessageSent: "total_message_sent",
    appliedTags: "applied_tags",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ThreadResponse$ {
  /** @deprecated use `ThreadResponse$inboundSchema` instead. */
  export const inboundSchema = ThreadResponse$inboundSchema;
  /** @deprecated use `ThreadResponse$outboundSchema` instead. */
  export const outboundSchema = ThreadResponse$outboundSchema;
  /** @deprecated use `ThreadResponse$Outbound` instead. */
  export type Outbound = ThreadResponse$Outbound;
}
