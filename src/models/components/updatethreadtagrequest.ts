/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UpdateThreadTagRequest = {
    name: string;
    emojiId?: string | null | undefined;
    emojiName?: string | null | undefined;
    moderated?: boolean | null | undefined;
    id?: string | null | undefined;
};

/** @internal */
export const UpdateThreadTagRequest$inboundSchema: z.ZodType<
    UpdateThreadTagRequest,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        name: z.string(),
        emoji_id: z.nullable(z.string()).optional(),
        emoji_name: z.nullable(z.string()).optional(),
        moderated: z.nullable(z.boolean()).optional(),
        id: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            emoji_id: "emojiId",
            emoji_name: "emojiName",
        });
    });

/** @internal */
export type UpdateThreadTagRequest$Outbound = {
    name: string;
    emoji_id?: string | null | undefined;
    emoji_name?: string | null | undefined;
    moderated?: boolean | null | undefined;
    id?: string | null | undefined;
};

/** @internal */
export const UpdateThreadTagRequest$outboundSchema: z.ZodType<
    UpdateThreadTagRequest$Outbound,
    z.ZodTypeDef,
    UpdateThreadTagRequest
> = z
    .object({
        name: z.string(),
        emojiId: z.nullable(z.string()).optional(),
        emojiName: z.nullable(z.string()).optional(),
        moderated: z.nullable(z.boolean()).optional(),
        id: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            emojiId: "emoji_id",
            emojiName: "emoji_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UpdateThreadTagRequest$ {
    /** @deprecated use `UpdateThreadTagRequest$inboundSchema` instead. */
    export const inboundSchema = UpdateThreadTagRequest$inboundSchema;
    /** @deprecated use `UpdateThreadTagRequest$outboundSchema` instead. */
    export const outboundSchema = UpdateThreadTagRequest$outboundSchema;
    /** @deprecated use `UpdateThreadTagRequest$Outbound` instead. */
    export type Outbound = UpdateThreadTagRequest$Outbound;
}
