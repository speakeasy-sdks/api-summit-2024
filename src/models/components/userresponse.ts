/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import * as z from "zod";

export type UserResponse = {
    id: string;
    username: string;
    avatar?: string | null | undefined;
    discriminator: string;
    publicFlags: number;
    flags: number;
    bot?: boolean | null | undefined;
    system?: boolean | null | undefined;
    banner?: string | null | undefined;
    accentColor?: number | null | undefined;
    globalName?: string | null | undefined;
};

/** @internal */
export const UserResponse$inboundSchema: z.ZodType<UserResponse, z.ZodTypeDef, unknown> = z
    .object({
        id: z.string(),
        username: z.string(),
        avatar: z.nullable(z.string()).optional(),
        discriminator: z.string(),
        public_flags: z.number().int(),
        flags: z.number().int(),
        bot: z.nullable(z.boolean()).optional(),
        system: z.nullable(z.boolean()).optional(),
        banner: z.nullable(z.string()).optional(),
        accent_color: z.nullable(z.number().int()).optional(),
        global_name: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            public_flags: "publicFlags",
            accent_color: "accentColor",
            global_name: "globalName",
        });
    });

/** @internal */
export type UserResponse$Outbound = {
    id: string;
    username: string;
    avatar?: string | null | undefined;
    discriminator: string;
    public_flags: number;
    flags: number;
    bot?: boolean | null | undefined;
    system?: boolean | null | undefined;
    banner?: string | null | undefined;
    accent_color?: number | null | undefined;
    global_name?: string | null | undefined;
};

/** @internal */
export const UserResponse$outboundSchema: z.ZodType<
    UserResponse$Outbound,
    z.ZodTypeDef,
    UserResponse
> = z
    .object({
        id: z.string(),
        username: z.string(),
        avatar: z.nullable(z.string()).optional(),
        discriminator: z.string(),
        publicFlags: z.number().int(),
        flags: z.number().int(),
        bot: z.nullable(z.boolean()).optional(),
        system: z.nullable(z.boolean()).optional(),
        banner: z.nullable(z.string()).optional(),
        accentColor: z.nullable(z.number().int()).optional(),
        globalName: z.nullable(z.string()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            publicFlags: "public_flags",
            accentColor: "accent_color",
            globalName: "global_name",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserResponse$ {
    /** @deprecated use `UserResponse$inboundSchema` instead. */
    export const inboundSchema = UserResponse$inboundSchema;
    /** @deprecated use `UserResponse$outboundSchema` instead. */
    export const outboundSchema = UserResponse$outboundSchema;
    /** @deprecated use `UserResponse$Outbound` instead. */
    export type Outbound = UserResponse$Outbound;
}
