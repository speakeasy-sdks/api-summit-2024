/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import { ErrorT, ErrorT$inboundSchema, ErrorT$Outbound, ErrorT$outboundSchema } from "./error.js";
import * as z from "zod";

export type InnerErrors = {
    /**
     * The list of errors for this field
     */
    errors: Array<ErrorT>;
};

/** @internal */
export const InnerErrors$inboundSchema: z.ZodType<InnerErrors, z.ZodTypeDef, unknown> = z
    .object({
        _errors: z.array(ErrorT$inboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            _errors: "errors",
        });
    });

/** @internal */
export type InnerErrors$Outbound = {
    _errors: Array<ErrorT$Outbound>;
};

/** @internal */
export const InnerErrors$outboundSchema: z.ZodType<
    InnerErrors$Outbound,
    z.ZodTypeDef,
    InnerErrors
> = z
    .object({
        errors: z.array(ErrorT$outboundSchema),
    })
    .transform((v) => {
        return remap$(v, {
            errors: "_errors",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace InnerErrors$ {
    /** @deprecated use `InnerErrors$inboundSchema` instead. */
    export const inboundSchema = InnerErrors$inboundSchema;
    /** @deprecated use `InnerErrors$outboundSchema` instead. */
    export const outboundSchema = InnerErrors$outboundSchema;
    /** @deprecated use `InnerErrors$Outbound` instead. */
    export type Outbound = InnerErrors$Outbound;
}
