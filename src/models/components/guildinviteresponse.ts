/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    InviteApplicationResponse,
    InviteApplicationResponse$inboundSchema,
    InviteApplicationResponse$Outbound,
    InviteApplicationResponse$outboundSchema,
} from "./inviteapplicationresponse.js";
import {
    InviteChannelResponse,
    InviteChannelResponse$inboundSchema,
    InviteChannelResponse$Outbound,
    InviteChannelResponse$outboundSchema,
} from "./invitechannelresponse.js";
import {
    InviteGuildResponse,
    InviteGuildResponse$inboundSchema,
    InviteGuildResponse$Outbound,
    InviteGuildResponse$outboundSchema,
} from "./inviteguildresponse.js";
import {
    InviteStageInstanceResponse,
    InviteStageInstanceResponse$inboundSchema,
    InviteStageInstanceResponse$Outbound,
    InviteStageInstanceResponse$outboundSchema,
} from "./invitestageinstanceresponse.js";
import {
    ScheduledEventResponse,
    ScheduledEventResponse$inboundSchema,
    ScheduledEventResponse$Outbound,
    ScheduledEventResponse$outboundSchema,
} from "./scheduledeventresponse.js";
import {
    UserResponse,
    UserResponse$inboundSchema,
    UserResponse$Outbound,
    UserResponse$outboundSchema,
} from "./userresponse.js";
import * as z from "zod";

export type GuildInviteResponse = {
    type?: 0 | undefined;
    code: string;
    inviter?: UserResponse | null | undefined;
    maxAge?: number | null | undefined;
    createdAt?: Date | null | undefined;
    expiresAt?: Date | null | undefined;
    isContact?: boolean | null | undefined;
    flags?: number | null | undefined;
    guild?: InviteGuildResponse | null | undefined;
    guildId?: string | null | undefined;
    channel?: InviteChannelResponse | null | undefined;
    stageInstance?: InviteStageInstanceResponse | null | undefined;
    targetType?: 1 | null | undefined;
    targetUser?: UserResponse | null | undefined;
    targetApplication?: InviteApplicationResponse | null | undefined;
    guildScheduledEvent?: ScheduledEventResponse | null | undefined;
    uses?: number | null | undefined;
    maxUses?: number | null | undefined;
    temporary?: boolean | null | undefined;
    approximateMemberCount?: number | null | undefined;
    approximatePresenceCount?: number | null | undefined;
};

/** @internal */
export const GuildInviteResponse$inboundSchema: z.ZodType<
    GuildInviteResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: z.literal(0).optional(),
        code: z.string(),
        inviter: z.nullable(UserResponse$inboundSchema).optional(),
        max_age: z.nullable(z.number().int()).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        expires_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        is_contact: z.nullable(z.boolean()).optional(),
        flags: z.nullable(z.number().int()).optional(),
        guild: z.nullable(InviteGuildResponse$inboundSchema).optional(),
        guild_id: z.nullable(z.string()).optional(),
        channel: z.nullable(InviteChannelResponse$inboundSchema).optional(),
        stage_instance: z.nullable(InviteStageInstanceResponse$inboundSchema).optional(),
        target_type: z.nullable(z.literal(1)).optional(),
        target_user: z.nullable(UserResponse$inboundSchema).optional(),
        target_application: z.nullable(InviteApplicationResponse$inboundSchema).optional(),
        guild_scheduled_event: z.nullable(ScheduledEventResponse$inboundSchema).optional(),
        uses: z.nullable(z.number().int()).optional(),
        max_uses: z.nullable(z.number().int()).optional(),
        temporary: z.nullable(z.boolean()).optional(),
        approximate_member_count: z.nullable(z.number().int()).optional(),
        approximate_presence_count: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            max_age: "maxAge",
            created_at: "createdAt",
            expires_at: "expiresAt",
            is_contact: "isContact",
            guild_id: "guildId",
            stage_instance: "stageInstance",
            target_type: "targetType",
            target_user: "targetUser",
            target_application: "targetApplication",
            guild_scheduled_event: "guildScheduledEvent",
            max_uses: "maxUses",
            approximate_member_count: "approximateMemberCount",
            approximate_presence_count: "approximatePresenceCount",
        });
    });

/** @internal */
export type GuildInviteResponse$Outbound = {
    type: 0;
    code: string;
    inviter?: UserResponse$Outbound | null | undefined;
    max_age?: number | null | undefined;
    created_at?: string | null | undefined;
    expires_at?: string | null | undefined;
    is_contact?: boolean | null | undefined;
    flags?: number | null | undefined;
    guild?: InviteGuildResponse$Outbound | null | undefined;
    guild_id?: string | null | undefined;
    channel?: InviteChannelResponse$Outbound | null | undefined;
    stage_instance?: InviteStageInstanceResponse$Outbound | null | undefined;
    target_type: 1 | null;
    target_user?: UserResponse$Outbound | null | undefined;
    target_application?: InviteApplicationResponse$Outbound | null | undefined;
    guild_scheduled_event?: ScheduledEventResponse$Outbound | null | undefined;
    uses?: number | null | undefined;
    max_uses?: number | null | undefined;
    temporary?: boolean | null | undefined;
    approximate_member_count?: number | null | undefined;
    approximate_presence_count?: number | null | undefined;
};

/** @internal */
export const GuildInviteResponse$outboundSchema: z.ZodType<
    GuildInviteResponse$Outbound,
    z.ZodTypeDef,
    GuildInviteResponse
> = z
    .object({
        type: z.literal(0).default(0 as const),
        code: z.string(),
        inviter: z.nullable(UserResponse$outboundSchema).optional(),
        maxAge: z.nullable(z.number().int()).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        expiresAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        isContact: z.nullable(z.boolean()).optional(),
        flags: z.nullable(z.number().int()).optional(),
        guild: z.nullable(InviteGuildResponse$outboundSchema).optional(),
        guildId: z.nullable(z.string()).optional(),
        channel: z.nullable(InviteChannelResponse$outboundSchema).optional(),
        stageInstance: z.nullable(InviteStageInstanceResponse$outboundSchema).optional(),
        targetType: z.nullable(z.literal(1).default(1 as const)),
        targetUser: z.nullable(UserResponse$outboundSchema).optional(),
        targetApplication: z.nullable(InviteApplicationResponse$outboundSchema).optional(),
        guildScheduledEvent: z.nullable(ScheduledEventResponse$outboundSchema).optional(),
        uses: z.nullable(z.number().int()).optional(),
        maxUses: z.nullable(z.number().int()).optional(),
        temporary: z.nullable(z.boolean()).optional(),
        approximateMemberCount: z.nullable(z.number().int()).optional(),
        approximatePresenceCount: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            maxAge: "max_age",
            createdAt: "created_at",
            expiresAt: "expires_at",
            isContact: "is_contact",
            guildId: "guild_id",
            stageInstance: "stage_instance",
            targetType: "target_type",
            targetUser: "target_user",
            targetApplication: "target_application",
            guildScheduledEvent: "guild_scheduled_event",
            maxUses: "max_uses",
            approximateMemberCount: "approximate_member_count",
            approximatePresenceCount: "approximate_presence_count",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GuildInviteResponse$ {
    /** @deprecated use `GuildInviteResponse$inboundSchema` instead. */
    export const inboundSchema = GuildInviteResponse$inboundSchema;
    /** @deprecated use `GuildInviteResponse$outboundSchema` instead. */
    export const outboundSchema = GuildInviteResponse$outboundSchema;
    /** @deprecated use `GuildInviteResponse$Outbound` instead. */
    export type Outbound = GuildInviteResponse$Outbound;
}
