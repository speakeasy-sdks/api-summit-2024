/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    ApplicationIntegrationTypeConfigurationResponse,
    ApplicationIntegrationTypeConfigurationResponse$inboundSchema,
    ApplicationIntegrationTypeConfigurationResponse$Outbound,
    ApplicationIntegrationTypeConfigurationResponse$outboundSchema,
} from "./applicationintegrationtypeconfigurationresponse.js";
import {
    ApplicationOAuth2InstallParamsResponse,
    ApplicationOAuth2InstallParamsResponse$inboundSchema,
    ApplicationOAuth2InstallParamsResponse$Outbound,
    ApplicationOAuth2InstallParamsResponse$outboundSchema,
} from "./applicationoauth2installparamsresponse.js";
import {
    UserResponse,
    UserResponse$inboundSchema,
    UserResponse$Outbound,
    UserResponse$outboundSchema,
} from "./userresponse.js";
import * as z from "zod";

export type ApplicationResponse = {
    id: string;
    name: string;
    icon?: string | null | undefined;
    description: string;
    type?: 4 | null | undefined;
    coverImage?: string | null | undefined;
    primarySkuId?: string | null | undefined;
    bot?: UserResponse | null | undefined;
    slug?: string | null | undefined;
    guildId?: string | null | undefined;
    rpcOrigins?: Array<string> | null | undefined;
    botPublic?: boolean | null | undefined;
    botRequireCodeGrant?: boolean | null | undefined;
    termsOfServiceUrl?: string | null | undefined;
    privacyPolicyUrl?: string | null | undefined;
    customInstallUrl?: string | null | undefined;
    installParams?: ApplicationOAuth2InstallParamsResponse | null | undefined;
    integrationTypesConfig?:
        | { [k: string]: ApplicationIntegrationTypeConfigurationResponse }
        | null
        | undefined;
    verifyKey: string;
    flags: number;
    maxParticipants?: number | null | undefined;
    tags?: Array<string> | null | undefined;
};

/** @internal */
export const ApplicationResponse$inboundSchema: z.ZodType<
    ApplicationResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        id: z.string(),
        name: z.string(),
        icon: z.nullable(z.string()).optional(),
        description: z.string(),
        type: z.nullable(z.literal(4)).optional(),
        cover_image: z.nullable(z.string()).optional(),
        primary_sku_id: z.nullable(z.string()).optional(),
        bot: z.nullable(UserResponse$inboundSchema).optional(),
        slug: z.nullable(z.string()).optional(),
        guild_id: z.nullable(z.string()).optional(),
        rpc_origins: z.nullable(z.array(z.string())).optional(),
        bot_public: z.nullable(z.boolean()).optional(),
        bot_require_code_grant: z.nullable(z.boolean()).optional(),
        terms_of_service_url: z.nullable(z.string()).optional(),
        privacy_policy_url: z.nullable(z.string()).optional(),
        custom_install_url: z.nullable(z.string()).optional(),
        install_params: z.nullable(ApplicationOAuth2InstallParamsResponse$inboundSchema).optional(),
        integration_types_config: z
            .nullable(z.record(ApplicationIntegrationTypeConfigurationResponse$inboundSchema))
            .optional(),
        verify_key: z.string(),
        flags: z.number().int(),
        max_participants: z.nullable(z.number().int()).optional(),
        tags: z.nullable(z.array(z.string())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            cover_image: "coverImage",
            primary_sku_id: "primarySkuId",
            guild_id: "guildId",
            rpc_origins: "rpcOrigins",
            bot_public: "botPublic",
            bot_require_code_grant: "botRequireCodeGrant",
            terms_of_service_url: "termsOfServiceUrl",
            privacy_policy_url: "privacyPolicyUrl",
            custom_install_url: "customInstallUrl",
            install_params: "installParams",
            integration_types_config: "integrationTypesConfig",
            verify_key: "verifyKey",
            max_participants: "maxParticipants",
        });
    });

/** @internal */
export type ApplicationResponse$Outbound = {
    id: string;
    name: string;
    icon?: string | null | undefined;
    description: string;
    type: 4 | null;
    cover_image?: string | null | undefined;
    primary_sku_id?: string | null | undefined;
    bot?: UserResponse$Outbound | null | undefined;
    slug?: string | null | undefined;
    guild_id?: string | null | undefined;
    rpc_origins?: Array<string> | null | undefined;
    bot_public?: boolean | null | undefined;
    bot_require_code_grant?: boolean | null | undefined;
    terms_of_service_url?: string | null | undefined;
    privacy_policy_url?: string | null | undefined;
    custom_install_url?: string | null | undefined;
    install_params?: ApplicationOAuth2InstallParamsResponse$Outbound | null | undefined;
    integration_types_config?:
        | { [k: string]: ApplicationIntegrationTypeConfigurationResponse$Outbound }
        | null
        | undefined;
    verify_key: string;
    flags: number;
    max_participants?: number | null | undefined;
    tags?: Array<string> | null | undefined;
};

/** @internal */
export const ApplicationResponse$outboundSchema: z.ZodType<
    ApplicationResponse$Outbound,
    z.ZodTypeDef,
    ApplicationResponse
> = z
    .object({
        id: z.string(),
        name: z.string(),
        icon: z.nullable(z.string()).optional(),
        description: z.string(),
        type: z.nullable(z.literal(4).default(4 as const)),
        coverImage: z.nullable(z.string()).optional(),
        primarySkuId: z.nullable(z.string()).optional(),
        bot: z.nullable(UserResponse$outboundSchema).optional(),
        slug: z.nullable(z.string()).optional(),
        guildId: z.nullable(z.string()).optional(),
        rpcOrigins: z.nullable(z.array(z.string())).optional(),
        botPublic: z.nullable(z.boolean()).optional(),
        botRequireCodeGrant: z.nullable(z.boolean()).optional(),
        termsOfServiceUrl: z.nullable(z.string()).optional(),
        privacyPolicyUrl: z.nullable(z.string()).optional(),
        customInstallUrl: z.nullable(z.string()).optional(),
        installParams: z.nullable(ApplicationOAuth2InstallParamsResponse$outboundSchema).optional(),
        integrationTypesConfig: z
            .nullable(z.record(ApplicationIntegrationTypeConfigurationResponse$outboundSchema))
            .optional(),
        verifyKey: z.string(),
        flags: z.number().int(),
        maxParticipants: z.nullable(z.number().int()).optional(),
        tags: z.nullable(z.array(z.string())).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            coverImage: "cover_image",
            primarySkuId: "primary_sku_id",
            guildId: "guild_id",
            rpcOrigins: "rpc_origins",
            botPublic: "bot_public",
            botRequireCodeGrant: "bot_require_code_grant",
            termsOfServiceUrl: "terms_of_service_url",
            privacyPolicyUrl: "privacy_policy_url",
            customInstallUrl: "custom_install_url",
            installParams: "install_params",
            integrationTypesConfig: "integration_types_config",
            verifyKey: "verify_key",
            maxParticipants: "max_participants",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ApplicationResponse$ {
    /** @deprecated use `ApplicationResponse$inboundSchema` instead. */
    export const inboundSchema = ApplicationResponse$inboundSchema;
    /** @deprecated use `ApplicationResponse$outboundSchema` instead. */
    export const outboundSchema = ApplicationResponse$outboundSchema;
    /** @deprecated use `ApplicationResponse$Outbound` instead. */
    export type Outbound = ApplicationResponse$Outbound;
}
