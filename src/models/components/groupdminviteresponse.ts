/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { remap as remap$ } from "../../lib/primitives.js";
import {
    InviteChannelResponse,
    InviteChannelResponse$inboundSchema,
    InviteChannelResponse$Outbound,
    InviteChannelResponse$outboundSchema,
} from "./invitechannelresponse.js";
import {
    UserResponse,
    UserResponse$inboundSchema,
    UserResponse$Outbound,
    UserResponse$outboundSchema,
} from "./userresponse.js";
import * as z from "zod";

export type GroupDMInviteResponse = {
    type?: 0 | undefined;
    code: string;
    inviter?: UserResponse | null | undefined;
    maxAge?: number | null | undefined;
    createdAt?: Date | null | undefined;
    expiresAt?: Date | null | undefined;
    channel?: InviteChannelResponse | null | undefined;
    approximateMemberCount?: number | null | undefined;
};

/** @internal */
export const GroupDMInviteResponse$inboundSchema: z.ZodType<
    GroupDMInviteResponse,
    z.ZodTypeDef,
    unknown
> = z
    .object({
        type: z.literal(0).optional(),
        code: z.string(),
        inviter: z.nullable(UserResponse$inboundSchema).optional(),
        max_age: z.nullable(z.number().int()).optional(),
        created_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        expires_at: z
            .nullable(
                z
                    .string()
                    .datetime({ offset: true })
                    .transform((v) => new Date(v))
            )
            .optional(),
        channel: z.nullable(InviteChannelResponse$inboundSchema).optional(),
        approximate_member_count: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            max_age: "maxAge",
            created_at: "createdAt",
            expires_at: "expiresAt",
            approximate_member_count: "approximateMemberCount",
        });
    });

/** @internal */
export type GroupDMInviteResponse$Outbound = {
    type: 0;
    code: string;
    inviter?: UserResponse$Outbound | null | undefined;
    max_age?: number | null | undefined;
    created_at?: string | null | undefined;
    expires_at?: string | null | undefined;
    channel?: InviteChannelResponse$Outbound | null | undefined;
    approximate_member_count?: number | null | undefined;
};

/** @internal */
export const GroupDMInviteResponse$outboundSchema: z.ZodType<
    GroupDMInviteResponse$Outbound,
    z.ZodTypeDef,
    GroupDMInviteResponse
> = z
    .object({
        type: z.literal(0).default(0 as const),
        code: z.string(),
        inviter: z.nullable(UserResponse$outboundSchema).optional(),
        maxAge: z.nullable(z.number().int()).optional(),
        createdAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        expiresAt: z.nullable(z.date().transform((v) => v.toISOString())).optional(),
        channel: z.nullable(InviteChannelResponse$outboundSchema).optional(),
        approximateMemberCount: z.nullable(z.number().int()).optional(),
    })
    .transform((v) => {
        return remap$(v, {
            maxAge: "max_age",
            createdAt: "created_at",
            expiresAt: "expires_at",
            approximateMemberCount: "approximate_member_count",
        });
    });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GroupDMInviteResponse$ {
    /** @deprecated use `GroupDMInviteResponse$inboundSchema` instead. */
    export const inboundSchema = GroupDMInviteResponse$inboundSchema;
    /** @deprecated use `GroupDMInviteResponse$outboundSchema` instead. */
    export const outboundSchema = GroupDMInviteResponse$outboundSchema;
    /** @deprecated use `GroupDMInviteResponse$Outbound` instead. */
    export type Outbound = GroupDMInviteResponse$Outbound;
}
