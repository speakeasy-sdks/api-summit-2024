/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";

export type MessageEmbedAuthorResponse = {
  name: string;
  url?: string | null | undefined;
  iconUrl?: string | null | undefined;
  proxyIconUrl?: string | null | undefined;
};

/** @internal */
export const MessageEmbedAuthorResponse$inboundSchema: z.ZodType<
  MessageEmbedAuthorResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  url: z.nullable(z.string()).optional(),
  icon_url: z.nullable(z.string()).optional(),
  proxy_icon_url: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "icon_url": "iconUrl",
    "proxy_icon_url": "proxyIconUrl",
  });
});

/** @internal */
export type MessageEmbedAuthorResponse$Outbound = {
  name: string;
  url?: string | null | undefined;
  icon_url?: string | null | undefined;
  proxy_icon_url?: string | null | undefined;
};

/** @internal */
export const MessageEmbedAuthorResponse$outboundSchema: z.ZodType<
  MessageEmbedAuthorResponse$Outbound,
  z.ZodTypeDef,
  MessageEmbedAuthorResponse
> = z.object({
  name: z.string(),
  url: z.nullable(z.string()).optional(),
  iconUrl: z.nullable(z.string()).optional(),
  proxyIconUrl: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    iconUrl: "icon_url",
    proxyIconUrl: "proxy_icon_url",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MessageEmbedAuthorResponse$ {
  /** @deprecated use `MessageEmbedAuthorResponse$inboundSchema` instead. */
  export const inboundSchema = MessageEmbedAuthorResponse$inboundSchema;
  /** @deprecated use `MessageEmbedAuthorResponse$outboundSchema` instead. */
  export const outboundSchema = MessageEmbedAuthorResponse$outboundSchema;
  /** @deprecated use `MessageEmbedAuthorResponse$Outbound` instead. */
  export type Outbound = MessageEmbedAuthorResponse$Outbound;
}
