/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { messagesCreate } from "../funcs/messagesCreate.js";
import { messagesDelete } from "../funcs/messagesDelete.js";
import { messagesGet } from "../funcs/messagesGet.js";
import { messagesList } from "../funcs/messagesList.js";
import { messagesUpdate } from "../funcs/messagesUpdate.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Messages extends ClientSDK {
  async get(
    request: operations.GetMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesGet(
      this,
      request,
      options,
    ));
  }

  async delete(
    request: operations.DeleteMessageRequest,
    options?: RequestOptions,
  ): Promise<void> {
    return unwrapAsync(messagesDelete(
      this,
      request,
      options,
    ));
  }

  async update(
    request: operations.UpdateMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesUpdate(
      this,
      request,
      options,
    ));
  }

  async list(
    request: operations.ListMessagesRequest,
    options?: RequestOptions,
  ): Promise<Array<components.MessageResponse>> {
    return unwrapAsync(messagesList(
      this,
      request,
      options,
    ));
  }

  async create(
    request: operations.CreateMessageRequest,
    options?: RequestOptions,
  ): Promise<components.MessageResponse> {
    return unwrapAsync(messagesCreate(
      this,
      request,
      options,
    ));
  }
}
